/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace LLMTrainingRequest {
  export type TrainingUserRequestStruct = {
    user: AddressLike;
    userAcceptTime: BigNumberish;
  };

  export type TrainingUserRequestStructOutput = [
    user: string,
    userAcceptTime: bigint
  ] & { user: string; userAcceptTime: bigint };
}

export interface LLMTrainingRequestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LlmIndex"
      | "acceptTraining"
      | "giveReward"
      | "requestTraining"
      | "retrieveTrainingUser"
      | "submitTraining"
      | "userTrainingAddresses"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "llmRequest" | "llmSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "LlmIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTraining",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "giveReward",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTraining",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveTrainingUser",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTraining",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userTrainingAddresses",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "LlmIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptTraining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "giveReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestTraining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveTrainingUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTraining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTrainingAddresses",
    data: BytesLike
  ): Result;
}

export namespace llmRequestEvent {
  export type InputTuple = [
    user: AddressLike,
    llmIndex: BigNumberish,
    llmModelLink: string,
    requirement: string,
    deadline: BigNumberish,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    llmIndex: bigint,
    llmModelLink: string,
    requirement: string,
    deadline: bigint,
    reward: bigint
  ];
  export interface OutputObject {
    user: string;
    llmIndex: bigint;
    llmModelLink: string;
    requirement: string;
    deadline: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace llmSubmittedEvent {
  export type InputTuple = [
    user: AddressLike,
    _indexId: BigNumberish,
    fineTunedModelId: string,
    datasetId: string,
    fineTuneHostedScript: string
  ];
  export type OutputTuple = [
    user: string,
    _indexId: bigint,
    fineTunedModelId: string,
    datasetId: string,
    fineTuneHostedScript: string
  ];
  export interface OutputObject {
    user: string;
    _indexId: bigint;
    fineTunedModelId: string;
    datasetId: string;
    fineTuneHostedScript: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LLMTrainingRequest extends BaseContract {
  connect(runner?: ContractRunner | null): LLMTrainingRequest;
  waitForDeployment(): Promise<this>;

  interface: LLMTrainingRequestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LlmIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        user: string;
        llmModelId: string;
        requirement: string;
        deadline: bigint;
        reward: bigint;
      }
    ],
    "view"
  >;

  acceptTraining: TypedContractMethod<
    [_indexId: BigNumberish],
    [void],
    "nonpayable"
  >;

  giveReward: TypedContractMethod<
    [_indexId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  requestTraining: TypedContractMethod<
    [
      llmModelId: string,
      requirement: string,
      deadline: BigNumberish,
      reward: BigNumberish
    ],
    [void],
    "payable"
  >;

  retrieveTrainingUser: TypedContractMethod<
    [_indexId: BigNumberish, index: BigNumberish],
    [LLMTrainingRequest.TrainingUserRequestStructOutput],
    "view"
  >;

  submitTraining: TypedContractMethod<
    [
      _indexId: BigNumberish,
      fineTunedModelId: string,
      datasetId: string,
      fineTuneHostedScript: string
    ],
    [void],
    "nonpayable"
  >;

  userTrainingAddresses: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[string, bigint] & { user: string; userAcceptTime: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LlmIndex"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        user: string;
        llmModelId: string;
        requirement: string;
        deadline: bigint;
        reward: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "acceptTraining"
  ): TypedContractMethod<[_indexId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "giveReward"
  ): TypedContractMethod<
    [_indexId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestTraining"
  ): TypedContractMethod<
    [
      llmModelId: string,
      requirement: string,
      deadline: BigNumberish,
      reward: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "retrieveTrainingUser"
  ): TypedContractMethod<
    [_indexId: BigNumberish, index: BigNumberish],
    [LLMTrainingRequest.TrainingUserRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitTraining"
  ): TypedContractMethod<
    [
      _indexId: BigNumberish,
      fineTunedModelId: string,
      datasetId: string,
      fineTuneHostedScript: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userTrainingAddresses"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[string, bigint] & { user: string; userAcceptTime: bigint }],
    "view"
  >;

  getEvent(
    key: "llmRequest"
  ): TypedContractEvent<
    llmRequestEvent.InputTuple,
    llmRequestEvent.OutputTuple,
    llmRequestEvent.OutputObject
  >;
  getEvent(
    key: "llmSubmitted"
  ): TypedContractEvent<
    llmSubmittedEvent.InputTuple,
    llmSubmittedEvent.OutputTuple,
    llmSubmittedEvent.OutputObject
  >;

  filters: {
    "llmRequest(address,uint256,string,string,uint256,uint256)": TypedContractEvent<
      llmRequestEvent.InputTuple,
      llmRequestEvent.OutputTuple,
      llmRequestEvent.OutputObject
    >;
    llmRequest: TypedContractEvent<
      llmRequestEvent.InputTuple,
      llmRequestEvent.OutputTuple,
      llmRequestEvent.OutputObject
    >;

    "llmSubmitted(address,uint256,string,string,string)": TypedContractEvent<
      llmSubmittedEvent.InputTuple,
      llmSubmittedEvent.OutputTuple,
      llmSubmittedEvent.OutputObject
    >;
    llmSubmitted: TypedContractEvent<
      llmSubmittedEvent.InputTuple,
      llmSubmittedEvent.OutputTuple,
      llmSubmittedEvent.OutputObject
    >;
  };
}
